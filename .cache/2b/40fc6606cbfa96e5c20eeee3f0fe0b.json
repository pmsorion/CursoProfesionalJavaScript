{"id":"ejercicios/promises.html","dependencies":[{"name":"C:\\Users\\fgarcia\\Platzi\\CursoProfesionaldeJavaScript\\package.json","includedInParent":true,"mtime":1589394169968}],"generated":{"html":"<html>\n  <head>\n    <title>Promesas</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n\n    <ul>\n      <li><button id=\"sequence\">Get Top Movies in Sequence</button></li>\n      <li><button id=\"parallel\">Get Top Movies in Parallel</button></li>\n      <li><button id=\"fastest\">Get Fastest Top Movie</button></li>\n    </ul>\n\n    <ul id=\"movies\"></ul>\n\n    <script>function _createForOfIteratorHelper(o) { if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// Ejemplo: renderMovies([{ title: \"Spider-Man\", release_date: \"2019-06-30\", poster_path: \"/rjbNpRMoVvqHmhmksbokcyCr7wn.jpg\" }])\n// Traducir las funciones de usar thens a usar async/await\n// Crear funci贸n para que no nos gastemos la cantidad de requests demasiado rapido\n// Crear funci贸n donde hacemos requests secuenciales\n// Crear funci贸n donde hacemos requests en paralelo\n// Crear funci贸n donde obtenemos el primer request que llegue\n// The Movie Database API: https://developers.themoviedb.org/3/getting-started/introduction\nvar apiKey = 'b89fc45c2067cbd33560270639722eae';\n\nfunction getMovie(_x) {\n  return _getMovie.apply(this, arguments);\n}\n\nfunction _getMovie() {\n  _getMovie = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(id) {\n    var url, response, data;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            url = \"https://api.themoviedb.org/3/movie/\".concat(id, \"?api_key=\").concat(apiKey);\n            _context4.next = 3;\n            return fetch(url);\n\n          case 3:\n            response = _context4.sent;\n            _context4.next = 6;\n            return response.json();\n\n          case 6:\n            data = _context4.sent;\n            return _context4.abrupt(\"return\", data);\n\n          case 8:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getMovie.apply(this, arguments);\n}\n\nfunction getPopularMovies() {\n  return _getPopularMovies.apply(this, arguments);\n}\n\nfunction _getPopularMovies() {\n  _getPopularMovies = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n    var url, response, data;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            url = \"https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=\".concat(apiKey);\n            _context5.next = 3;\n            return fetch(url);\n\n          case 3:\n            response = _context5.sent;\n            _context5.next = 6;\n            return response.json();\n\n          case 6:\n            data = _context5.sent;\n            return _context5.abrupt(\"return\", data.results);\n\n          case 8:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _getPopularMovies.apply(this, arguments);\n}\n\nfunction getTopMoviesIds() {\n  return _getTopMoviesIds.apply(this, arguments);\n}\n\nfunction _getTopMoviesIds() {\n  _getTopMoviesIds = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n    var n,\n        popularMovies,\n        ids,\n        _args6 = arguments;\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            n = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : 3;\n            _context6.next = 3;\n            return getPopularMovies();\n\n          case 3:\n            popularMovies = _context6.sent;\n            ids = popularMovies.slice(0, n).map(function (movie) {\n              return movie.id;\n            });\n            return _context6.abrupt(\"return\", ids);\n\n          case 6:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _getTopMoviesIds.apply(this, arguments);\n}\n\nfunction renderMovies(movies) {\n  var movieList = document.getElementById('movies');\n  movieList.innerHTML = '';\n  movies.forEach(function (movie) {\n    var listItem = document.createElement('li');\n    listItem.innerHTML = \"\\n            <img src=\\\"https://image.tmdb.org/t/p/w342\".concat(movie.poster_path, \"\\\" />\\n            <h5>\").concat(movie.title, \"</h5>\\n            <p>Released on <em>\").concat(movie.release_date, \"</em></p>\\n            \");\n    movieList.appendChild(listItem);\n  });\n}\n\nfunction getTopMoviesInSequence() {\n  return _getTopMoviesInSequence.apply(this, arguments);\n}\n\nfunction _getTopMoviesInSequence() {\n  _getTopMoviesInSequence = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n    var ids, movies, _iterator, _step, id, movie;\n\n    return regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return getTopMoviesIds();\n\n          case 2:\n            ids = _context7.sent;\n            movies = [];\n            _iterator = _createForOfIteratorHelper(ids);\n            _context7.prev = 5;\n\n            _iterator.s();\n\n          case 7:\n            if ((_step = _iterator.n()).done) {\n              _context7.next = 15;\n              break;\n            }\n\n            id = _step.value;\n            _context7.next = 11;\n            return getMovie(id);\n\n          case 11:\n            movie = _context7.sent;\n            movies.push(movie);\n\n          case 13:\n            _context7.next = 7;\n            break;\n\n          case 15:\n            _context7.next = 20;\n            break;\n\n          case 17:\n            _context7.prev = 17;\n            _context7.t0 = _context7[\"catch\"](5);\n\n            _iterator.e(_context7.t0);\n\n          case 20:\n            _context7.prev = 20;\n\n            _iterator.f();\n\n            return _context7.finish(20);\n\n          case 23:\n            return _context7.abrupt(\"return\", movies);\n\n          case 24:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[5, 17, 20, 23]]);\n  }));\n  return _getTopMoviesInSequence.apply(this, arguments);\n}\n\nfunction getTopMoviesInParallel() {\n  return _getTopMoviesInParallel.apply(this, arguments);\n}\n\nfunction _getTopMoviesInParallel() {\n  _getTopMoviesInParallel = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n    var ids, moviePromises, movies;\n    return regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return getTopMoviesIds();\n\n          case 2:\n            ids = _context8.sent;\n            moviePromises = ids.map(function (id) {\n              return getMovie(id);\n            });\n            _context8.next = 6;\n            return Promise.all(moviePromises);\n\n          case 6:\n            movies = _context8.sent;\n            return _context8.abrupt(\"return\", movies);\n\n          case 8:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _getTopMoviesInParallel.apply(this, arguments);\n}\n\nfunction getFastestTopMovie() {\n  return _getFastestTopMovie.apply(this, arguments);\n}\n\nfunction _getFastestTopMovie() {\n  _getFastestTopMovie = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {\n    var ids, moviePromises, movie;\n    return regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.next = 2;\n            return getTopMoviesIds();\n\n          case 2:\n            ids = _context9.sent;\n            moviePromises = ids.map(function (id) {\n              return getMovie(id);\n            });\n            _context9.next = 6;\n            return Promise.race(moviePromises);\n\n          case 6:\n            movie = _context9.sent;\n            return _context9.abrupt(\"return\", movie);\n\n          case 8:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _getFastestTopMovie.apply(this, arguments);\n}\n\ndocument.getElementById('sequence').onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n  var movies;\n  return regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return getTopMoviesInSequence();\n\n        case 2:\n          movies = _context.sent;\n          renderMovies(movies);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\ndocument.getElementById('parallel').onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n  var movies;\n  return regeneratorRuntime.wrap(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return getTopMoviesInParallel();\n\n        case 2:\n          movies = _context2.sent;\n          renderMovies(movies);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee2);\n}));\ndocument.getElementById('fastest').onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n  var movie;\n  return regeneratorRuntime.wrap(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return getFastestTopMovie();\n\n        case 2:\n          movie = _context3.sent;\n          renderMovies([movie]);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _callee3);\n}));</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"ef48252e43d7ce5fede9bf05bcd916c1","cacheData":{"env":{}}}