{"id":"ejercicios/abort-fetch.html","dependencies":[{"name":"C:\\Users\\fgarcia\\Platzi\\CursoProfesionaldeJavaScript\\package.json","includedInParent":true,"mtime":1589394169968}],"generated":{"html":"<html>\r\n  <head>\r\n    <title>Abort Fetch</title>\r\n  </head>\r\n\r\n  <body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n\r\n    <img id=\"huge-image\" height=\"400\">\r\n\r\n         <!-- esta es la forma clasica de cargar imagenes. \r\n         para usar fetch lo quitamos de alli -->\r\n\r\n    <button id=\"load\">Load HUGE Image</button>\r\n    <button id=\"stop\" disabled=\"\">Stop Fetching</button>\r\n\r\n    <script>function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar url = 'https://images.pexels.com/photos/974470/nature-stars-milky-way-galaxy-974470.jpeg?q=100';\nvar img = document.getElementById('huge-image');\nvar loadButton = document.getElementById('load');\nvar stopButton = document.getElementById('stop');\nvar controller;\n\nfunction startLoading() {\n  loadButton.disabled = true;\n  loadButton.innerText = 'Loading...';\n  stopButton.disabled = false;\n}\n\nfunction stopLoading() {\n  loadButton.disabled = false;\n  loadButton.innerText = 'Load HUGE Image';\n  stopButton.disabled = true;\n}\n\nloadButton.onclick = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n  var response, blob, imgUrl;\n  return regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          startLoading();\n          controller = new AbortController();\n          _context.prev = 2;\n          _context.next = 5;\n          return fetch(url, {\n            signal: controller.signal\n          });\n\n        case 5:\n          response = _context.sent;\n          _context.next = 8;\n          return response.blob();\n\n        case 8:\n          blob = _context.sent;\n          imgUrl = URL.createObjectURL(blob);\n          img.src = imgUrl;\n          _context.next = 16;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](2);\n          console.log(_context.t0.message);\n\n        case 16:\n          stopLoading();\n\n        case 17:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee, null, [[2, 13]]);\n}));\n\nstopButton.onclick = function () {\n  controller.abort();\n  stopLoading();\n};</script>\r\n  </body>\r\n</html>\r\n"},"sourceMaps":null,"error":null,"hash":"0e1eb5845b4713384624b694f370e06c","cacheData":{"env":{}}}