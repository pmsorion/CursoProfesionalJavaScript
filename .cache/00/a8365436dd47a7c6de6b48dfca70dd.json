{"id":"ejercicios/prototype.html","dependencies":[{"name":"C:\\Users\\fgarcia\\Platzi\\CursoProfesionaldeJavaScript\\package.json","includedInParent":true,"mtime":1589394169968}],"generated":{"html":"<html>\n  <head>\n    <title>Prototype</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <p><em>Abre la consola</em></p>\n\n    <script>// Un objeto común y corriente\n// const centella = {\n//   name: 'Centella'\n// }\n// centella.saludar = function () {\n//   console.log(`Hola soy ${this.name}`)\n// }\n// centella.saludar();\n// // Otro objeto más\n// const iron = {\n//   name: 'Iron Man'\n// };\n// iron.saludar = function () {\n//   console.log(`Hola soy ${this.name}`)\n// }\n// iron.saludar();\n// Seamos un poco más eficientes\n//   function Hero (name) {\n//     const hero = {\n//       name: name\n//     }\n//     hero.saludar = function() {\n//     console.log(`Hola soy ${this.name}`)\n//     };\n//     return hero\n//   }\n//  const centella = Hero('Centella');\n//  centella.saludar();\n//   const iron = Hero('Iron Man');\n//   iron.saludar();\n// Aun podemos mejorar más y evitar tener que crear la misma función cada vez\n//   const heroMethods = {\n//     saludar: function() {\n//       console.log(`Me llamo ${this.name}`)\n//     },\n//   };\n//   function Hero (name) {\n//     const hero = {\n//       name: name\n//     };\n//     hero.saludar = heroMethods.saludar;\n//     return hero;\n//   }\n//  const centella = Hero('Centella');\n//  centella.saludar();\n//   const iron = Hero('Iron Man');\n//   iron.saludar();\n// Object.create\n// const nuevoObjeto = Object.create(objeto);\n//   const heroMethods = {\n//     saludar: function() {\n//       console.log(`Soy el superheroe!! ${this.name}`)\n//     },\n//   };\n//   function Hero (name) {\n//     const hero = Object.create(heroMethods)\n//     hero.name = name;\n//     return hero;\n//   }\n//  const centella = Hero('Centella');\n//  centella.saludar();\n//   const iron = Hero('Iron Man');\n//   iron.saludar();\n// Los métodos de hero dentro de Hero\n// const heroMethods = {\n//   saludar: function() {\n//     console.log(`Soy el superheroe!! ${this.name}`)\n//   },\n// };\n//   function Hero (name) {\n//     const hero = Object.create(Hero.prototype)\n//     hero.name = name;\n//     return hero;\n//   }\n//   Hero.prototype.saludar = function(){\n//     console.log(`El superhereo mas grande es: ${this.name}`)\n//   }\n//  const centella = Hero('Centella');\n//  centella.saludar();\n//   const iron = Hero('Iron Man');\n//   iron.saludar();\n// new es un atajo (azucar sintactica) para llevar Hero.prototype al objeto que estamos creando\nfunction Hero(name) {\n  // this = Object.create(Hero.prototype)\n  this.name = name; //return this;\n}\n\nHero.prototype.saludar = function () {\n  console.log(\"New hero: \".concat(this.name));\n};\n\nvar centella = new Hero('Centella');\ncentella.saludar();\nvar iron = new Hero('Iron Man');\niron.saludar();</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"7bb37e925e127ea80adbfd2e30c442b2","cacheData":{"env":{}}}