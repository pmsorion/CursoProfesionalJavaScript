{"id":"ejercicios/call-apply-bind.html","dependencies":[{"name":"C:\\Users\\fgarcia\\Platzi\\CursoProfesionaldeJavaScript\\package.json","includedInParent":true,"mtime":1590190080299}],"generated":{"html":"<html>\r\n  <head>\r\n    <title>\r\n      Function.prototype.call, Function.prototype.apply, Function.prototype.bind\r\n    </title>\r\n  </head>\r\n\r\n  <body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n\r\n    <ul>\r\n      <li><button class=\"call-to-action\">Aprender</button></li>\r\n      <li><button class=\"call-to-action\">Aprender Más</button></li>\r\n      <li><button class=\"call-to-action\">¡Nunca parar de Aprender!</button></li>\r\n    </ul>\r\n\r\n    <script>// Establece `this` usando `call`\n//aqui establecimos el valor de this para la funcion saludar\nfunction saludar() {\n  console.log(`Hola soy ${this.name} ${this.apellido}`);\n}\n\nconst fran = {\n  name: 'Francisco',\n  apellido: 'Garcia'\n};\nsaludar.call(fran); // Establece `this` usando `call` y pasar argumentos a la función\n\nfunction caminar(metros, direccion) {\n  console.log(`${this.name} camina ${metros} metros hacia ${direccion}`);\n}\n\ncaminar.call(fran, 400, 'norte'); // Establece `this` usando `apply` y pasar argumentos a la función\n//recibe los parametros como un arreglo (array)\n\nconst valores = [1500, 'el noreste'];\ncaminar.apply(fran, [800, 'al sur']);\ncaminar.apply(fran, valores); //diferencia entre call y apply\n//call los argumentos se pasan separados por coma\n//Apply los argumentos se pasan en un Array\n// Establecer `this` en una nueva función usando `bind`\n//se usa para hacer funciones reutilizables\n\nconst juanda = {\n  name: 'Juan David',\n  apellido: 'Garcia'\n};\nconst juandaSaluda = saludar.bind(juanda);\njuandaSaluda();\nconst juandaCamina = caminar.bind(juanda);\njuandaCamina(3576, 'al sur oriente');\nconst juandaCamina2 = caminar.bind(juanda, 1234, 'al oriente');\njuandaCamina2(); //de esta forma guardamos parcialmente los argumentos y luego llenamos los demas\n\nconst juandaCamina3 = caminar.bind(juanda, 5566);\njuandaCamina3('el infinito y mas alla'); //“Currying” guardamos parcialmente algunos argumentos y luego llenamos los demas\n// Cuándo es útil usar uno de estos métodos\n// call y apply asignan el valor de this y se va a ejecutar inmediatamente\n// bind crea una nueva funcion,\n//const buttons = document.getElementsByClassName('call-to-action');\n\nconst buttons = document.getElementsByClassName('call-to-action'); // buttons.forEach(button => {\n//   button.onClick = () => alert('Nunca pares de aprender!!!')\n// });\n// Array.prototype.forEach.call(buttons, button => {\n//   button.onClick = () => alert('Nunca para de apreder!!!!!')\n// });\n\nArray.prototype.forEach.call(buttons, button => {\n  button.onclick = () => alert('Nunca pares de aprender!!!!!!');\n}); //Da error por que buttons, es un NodeList y no una funcion</script>\r\n  </body>\r\n</html>\r\n"},"sourceMaps":null,"error":null,"hash":"83ac07686187ebf9c5539d1104c5b83c","cacheData":{"env":{}}}